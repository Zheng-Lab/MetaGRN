This class extends the [[MarkovProposal]] interface by adding methods
appropriate for generating states for a [[HastingsCoupledSampler]].

This interface replaces [[AdaptiveProposal]], which is now
depreciated.

<<Copyright>>=

 /* $Header: /cvsroot/hydra-mcmc/Hydra/org/omegahat/Simulation/MCMC/HastingsCoupledProposal.jweb,v 1.1.1.1 2001/04/04 17:16:11 warneg Exp $  */

 /* (c) 2000 Gregory R. Warnes */ 
 /* May also contain code (c) 1999 The Omegahat Project */





@ %def 

<<*>>=

<<Copyright>>
<<Package>>
<<Imports>>

/** This class extends the <code>GeneralProposal</code> interface by
 * adding methods appropriate for generating states for a
 * <code>HastingsCoupledSampler</code>.  This interface replaces to
 * <code>AdaptiveProposal</code>, which is now depreciated.
 *
 **/
public interface HastingsCoupledProposal // extends MarkovProposal
{
    <<Methods extending ConditionalDensity>>
    <<Methods extending ConditionalGenerator>>
    <<Methods extending GeneralProposal>>
        
}

@ %def 

<<Methods extending ConditionalDensity>>=

/** Computes the HastingsCoupled transition probability for one sub-state given the entire state vector 
 *  @param conditions   Current value of the component state being updated
 *  @param state        Proposed state of the component state being updated
 *  @param which        index of the component state being updated
 *  @param stateVector  entire set of states, including the state being updated
 **/
public double conditionalPDF   ( Object state, Object conditions, int which, MultiState stateVector); 

/** Computes the HastingsCoupled transition probability for one sub-state given the entire state vector 
 *  @param conditions   Current value of the component state being updated
 *  @param state        Proposed state of the component state being updated
 *  @param which        index of the component state being updated
 *  @param stateVector  entire set of states, including the state being updated
 **/
public double logConditionalPDF( Object state, Object conditions, int which, MultiState stateVector );   


@ %def 

<<Methods extending ConditionalGenerator>>=

/** Generate a new component state given the entire state vector 
 *  @param conditions   Current value of the component state being updated
 *  @param which        index of the component state being updated
 *  @param stateVector  entire set of states, including the state being updated
 **/
public Object   generate( Object conditions, int which, MultiState stateVector  );


@ %def 


<<Methods extending GeneralProposal>>=

/** Computes the HastingsCoupled transition probability for one sub-state given the entire state vector 
 *  @param from         Current value of the component state being updated
 *  @param to           Proposed state of the component state being updated
 *  @param which        index of the component state being updated
 *  @param stateVector  entire set of states, including the state being updated
 **/
public double transitionProbability( Object from, Object to, int which, MultiState stateVector );

/** Computes the HastingsCoupled transition probability for one sub-state given the entire state vector 
 *  @param from         Current value of the component state being updated
 *  @param to           Proposed state of the component state being updated
 *  @param which        index of the component state being updated
 *  @param stateVector  entire set of states, including the state being updated
 **/
public double logTransitionProbability( Object from, Object to, int which, MultiState stateVector );



@ %def 


<<Package>>=

    package org.omegahat.Simulation.MCMC;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;

    import org.omegahat.Probability.Distributions.*;

@ %def 

