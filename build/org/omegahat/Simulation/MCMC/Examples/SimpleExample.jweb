This file provides a main() that executes the same program as the
omega script ``SimpleExample.omg''.  Its purpose is to
\begin{itemize}
\item see if the omegahat modeling/language features can be used
	directly from java
\item allow for timings using the shell time command without the
	lengthy omegahat startup time 
\end{itemize}

<<*>>=

<<Package>>
<<Imports>>

public class SimpleExample
{
  <<Main>>
}


@ %def 

<<Main>>=

public static void main( String[] argv ) throws Throwable
{


/*****************************************************/
/* First specify the Target (Posterior) Distribution */
/*****************************************************/
MultiLineModelFormula m = ModelFormula.multiLineParse(" X ~ N( mu, sigma) ; mu ~ N( 0.0, rho ); rho ~ N( 1.0, 0.3) ");

/*************************************************************/
/* Now specify the Metropolis-Hastings Proposal Distribution */
/*************************************************************/
MultiLineModelFormula p = ModelFormula.multiLineParse(" mu ~ N( mu, sm ); rho ~ N( rho, sr); ");

/************************************/
/* create a random number generator */
/************************************/
CollingsPRNGAdministrator a = new CollingsPRNGAdministrator();               /* This server generates unique random number generators when asked */
PRNG prng = new CollingsPRNG( a.registerPRNGState() );  /* instantiat the generator */

/***********************************************************/
/* define all of the terms and objects that will be needed */
/***********************************************************/
Database d = new ObjectDatabase("Definitions");             /* Somewhere to store everything. */
d.assign("sigma", new Double(1.0) );
d.assign("N", new Normal( new CollingsPRNG( a.registerPRNGState() ) ) );  /* Create a normal distribution object */

d.assign("X", new double[] {4.480608, 4.472416, 3.738617, 5.093094, //
2.209083, 1.478951, 1.382535, 4.103335, 2.244269, 3.070244, 4.590988, //
1.901725, 2.892511, 4.490848, 3.652389, 3.172301, 4.247049, 2.271669, //
3.193590, 2.28028, 1.407532, 3.810055, 2.538954, 3.774791, 2.673972, //
1.650474, 3.537650, 2.19295, 2.417387, 2.671459, 3.076402, 3.645867, //
3.123181, 5.172414, 2.719802, 3.218641, 2.381867, 4.362955, 2.135889, //
4.54022, 2.496254, 3.393177, 3.623449, 0.1563431, -0.4630982, //
3.170979, 1.698627, 2.489101, 3.179863, 1.381480, 2.968871, 2.553213, //
2.81571, 1.384136, 1.344707, 2.306096, 1.150164, 3.539327, 1.424764, //
3.104447, 2.456724, 4.646438, 1.775502, 3.680398, 2.629114, 3.398694, //
2.075375, 3.123948, 1.714057, 3.298205, 4.901637, 2.543036, 1.811994, //
2.874148, 3.631943, 3.475023, 2.98129, 2.696148, 3.637603, 3.476499, //
1.814034, 4.302414, 3.576143, 3.411982, 2.970440, 2.367898, 3.112148, //
3.380583, 2.042252, 2.322567, 2.787768, 0.5702486, 2.529506, 4.034501, //
2.985719, 3.122801, 2.837401, 3.619862, 1.145621, 3.622189}); /* X _ rnorm(100,3) */

d.assign("sm",   new Double( 0.25 ) );
d.assign("sr",   new Double( 0.25 ));



/*************************/
/* Pick an initial state */
/*************************/

MCMCStateDatabase i = new MCMCStateDatabase("Initial State"); 
i.assign("mu", new Double(4.0));      /* intentionally bad */
i.assign("rho", new Double(0.5) );

/*************************************************************************/
/* Create the proposal distribution using the model and the definitions. */
/*************************************************************************/
ExpressionGeneralProposal pm = new ExpressionGeneralProposal( p , d );

/**********************************************************************/
/* Create the target distribution using the model and the definitions */
/**********************************************************************/
ExpressionTarget tm = new ExpressionTarget( m, d );  

/*************************************/
/* now create the actual MCMC object */
/*************************************/
CustomMetropolisHastingsSampler mcmc = new CustomMetropolisHastingsSampler(i, tm, pm, prng, true  ); 

/***************************************************************/
/* add a listener so we get information about what happens ... */
/***************************************************************/

//StepListenerPrinter l = new StepListenerPrinter();
//ListenerWriter w = new ListenerWriter("test.out");
ListenerWriter w = new ListenerGzipWriter("test.out.gz");

//MCMCListenerHandle lh = mcmc.registerListener(l);
MCMCListenerHandle lw = mcmc.registerListener(w);

/*******************************/
/* Now run for 1000 iterations */
/*******************************/

//PlottingListener lb = new PlottingListener(new String[]{"mu"},1000);
//MCMCListenerHandle lbh = mcmc.registerListener(lb);
//lb.refreshInterval(50);

ExpandingPlottingListener lbe = new ExpandingPlottingListener(new String[]{"mu","rho"},10, 10000);
MCMCListenerHandle lbeh = mcmc.registerListener(lbe);
lbe.refreshInterval(50);


mcmc.iterate(Integer.parseInt(argv[0]));

w.flush();
w.close(); // necessary to get everything cleaned up because the next command

Runtime.getRuntime().exit(0); // forces termination of all threads
}

@

<<Package>>=
package org.omegahat.Simulation.MCMC.Examples;
@

<<Imports>>=

import org.omegahat.Simulation.MCMC.*;
import org.omegahat.Simulation.MCMC.Expressions.*;
import org.omegahat.Simulation.MCMC.Listeners.*;
import org.omegahat.Simulation.RandomGenerators.*;
import org.omegahat.Models.Formulae.Expressions.*;
import org.omegahat.Environment.Databases.*;
import org.omegahat.Probability.Distributions.*;

@ %def 
