This class defines a minimal event that is generated when a chain has
completed one step.  It provides appropriate information about the
step.  It can be extended to provide arbitrarily rich information
about the step.

<<*>>=

<<Package>>
<<Imports>>

public class DetailChainStepEvent extends GenericChainStepEvent 
{
    <<Fields>>
    <<Accessors>>
    <<Constructors>>
    <<Methods>>
}
@

<<Fields>>=

// public MCMCState current; // inherited
public MCMCState proposed;
public MCMCState last;  
public double    lastProb;
public double    proposedProb;
public double    forwardProb;
public double    reverseProb;
public double    probAccept;
public double    acceptRand;
public boolean   accepted;
public double    acceptRate;

@ %def 

<<Accessors>>=

    /* none, everything is public */

@ %def 


<<Constructors>>=

    protected DetailChainStepEvent(){};
    

    public DetailChainStepEvent( Object source, 
				 MCMCState current,
				 MCMCState proposed,
				 MCMCState last,
				 double    lastProb,
				 double    proposedProb,
				 double    forwardProb,
				 double    reverseProb,
				 double    probAccept,
				 double    acceptRand,
				 boolean   accepted,
				 double    acceptRate)
    {
	this.source = source;
	this.description = "Chain Step Event (with details)";

	this.current = current;
	this.proposed = proposed;
	this.last = last;
	this.lastProb  = lastProb;
	this.proposedProb = proposedProb;
	this.forwardProb  = forwardProb;
	this.reverseProb  = reverseProb;
	this.probAccept   = probAccept;
	this.acceptRand   = acceptRand;
	this.accepted     = accepted;
	this.acceptRate   = acceptRate;
    }

@ %def 

<<Methods>>=


public String toString()
{
    String retval = description + "\n";
    retval += ( "Last            = " + last         + "\n" );
    retval += ( "Last     Prob   = " + lastProb     + "\n" );

    retval += ( "Proposed State  = " + proposed     + "\n" );
    retval += ( "Proposed Prob   = " + proposedProb + "\n" );

    retval += ( "Current  State  = " + current      + "\n" );

    retval += ( "Forward Prob    = " + forwardProb  + "\n" );
    retval += ( "Reverse Prob    = " + reverseProb  + "\n" );

    retval += ( "Acceptance Prob = " + probAccept   + "\n" );
    retval += ( "Acceptance Val  = " + acceptRand   + "\n" );

    retval += ( "Accepted?       = " + accepted     + "\n" );
    retval += ( "Acceptance Rate = " + acceptRate   + "\n" );
    return retval;
}
 

@ %def 

<<Constructors>>=

    /* none */

@ %def 

<<Package>>=

  package org.omegahat.Simulation.MCMC;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;

  import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;

@ %def 
