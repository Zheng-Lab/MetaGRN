
This file implements [[BaseMarkovChain]], an abstract class providing
default implementation for the interface [[MarkovChain]], and extending
[[NotifyingObject]].


<<Copyright>>=

/* $Header: /cvsroot/hydra-mcmc/Hydra/org/omegahat/Simulation/MCMC/BaseMarkovChain.jweb,v 1.1.1.1 2001/04/04 17:16:11 warneg Exp $  */
/* (c) 1999 by the Omegahat Project */

@ %def 

<<*>>=

<<Copyright>>
<<Package>>
<<Imports>>

/** 
 *  An abstract class providing methods implementing the interface <code>MarkovChain</code>.
 */
abstract public class BaseMarkovChain extends NotifyingMCMCObject implements MarkovChain, Runnable
{

    <<Fields>>
    <<Methods implementing MarkovChain>>
    <<Methods implementing Runnable>>
    <<New Methods>>
}

@
<<Fields>>=

    MCMCState state;
    
@
<<Methods implementing MarkovChain>>=

    /** Get the current state of the Markov Chain. */
    public MCMCState getState() { return state; }

    /** Generate the next state from the current state. */
    public void  step()
    {
        state = generate( state );
        notifyAll( new GenericChainStepEvent( this, state ) );
    }

    /** 
     * Perform several <code>step</code>s. 
     *
     * @param n how many steps 
     */
    public void iterate( int n )
    {
        for( int i = 0; i < n ; i++)
            step();
    }


@ %def 

<<Methods implementing Runnable>>=

public void run()
{
  while(true) step();
}

@ %def 


<<New Methods>>=

    /** Generate the next state from the current one */
    abstract protected MCMCState generate( MCMCState current );

@ %def 



<<Package>>=

    package org.omegahat.Simulation.MCMC;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;

    import java.util.*;

@ %def 

