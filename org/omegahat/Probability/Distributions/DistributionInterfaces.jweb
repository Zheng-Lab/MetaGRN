
<<Copyright>>=

/* $Header: /cvsroot/hydra-mcmc/Hydra/org/omegahat/Probability/Distributions/DistributionInterfaces.jweb,v 1.1.1.1 2001/04/04 17:16:10 warneg Exp $  */
/* (c) 1999 by the Omegahat Project */

@ %def 

<<Package>>=

package org.omegahat.Probability.Distributions;

@ %def 

<<Imports>>=

import java.util.*;
import org.omegahat.Simulation.RandomGenerators.PRNG;
import org.omegahat.Simulation.MCMC.*;

@ %def 
   
<<UnnormalizedDensity.java>>=

<<Copyright>>
<<Package>>
<<Imports>>

public interface UnnormalizedDensity
{
    public double unnormalizedDensity( Object state ); // { return Math.exp( logUnnormalizedDensity(state) ); }   
    public double logUnnormalizedDensity( Object state );

    public double UPDF   ( Object state );    // { return unnormalizedDensity(state); }
    public double logUPDF( Object state );    // { return logUnnormalizedDensity(state); }
}

@ %def 


   
<<Density.java>>=

<<Copyright>>
<<Package>>
<<Imports>>

public interface Density extends UnnormalizedDensity
{
    //    public double unnormalizedDensity( Object state ) { return density( state ) };
    //    public double logUnnormalizedDensity( Object state ){ return logDensity( state ) };
    public double density   ( Object state ); // { return Math.exp( logDensity(state) ); }   
    public double logDensity( Object state ); 

    public double PDF   ( Object state );    // { return density(state); }
    public double logPDF( Object state );    // { return logDensity(state); }
}

@ %def 



  
<<CumulativeDensity.java>>=

<<Copyright>>
<<Package>>
<<Imports>>

public interface CumulativeDensity 
{
    //    public double unnormalizedDensity( Object state ) { return density( state ) };
    //    public double logUnnormalizedDensity( Object state ){ return logDensity( state ) };
    public double cumulativeDensity( Object state );  // { return Math.exp( logCumulativeDensity(state) ); }   
    public double logCumulativeDensity( Object state );
}

@ %def 




<<Generator.java>>=

<<Copyright>>
<<Package>>
<<Imports>>

public interface Generator
{
    public Object   generate();
    public Object[] generateSeveral( int howmany ); 
    // { 
    //   Object[] retval = new Object[howmany];
    //   for(int i=0; i < howmany; i++)
    //     retval[i] = generate();
    // }
}

@ %def 


<<Distribution.java>>=

<<Copyright>>
<<Package>>
<<Imports>>

public interface Distribution extends Generator, Density
{
}


@ %def 



   
<<UnnormalizedConditionalDensity.java>>=

<<Copyright>>
<<Package>>
<<Imports>>

public interface UnnormalizedConditionalDensity
{
    public double unnormalizedConditionalDensity( Object state , Object conditions ); 
    // { return Math.exp( logUnnormalizedConditionalDensity(state, conditions ) ); }   

    public double logUnnormalizedConditionalDensity( Object state, Object conditions );

    public double UCPDF   ( Object state , Object conditions  );  // { return unnormalizedConditionalDensity(state, conditions); }
    public double logUCPDF( Object state , Object conditions  );  // { return logUnnormalizedConditionalDensity(state, conditions); }
}

@ %def 


   
<<ConditionalDensity.java>>=

<<Copyright>>
<<Package>>
<<Imports>>

public interface ConditionalDensity extends UnnormalizedConditionalDensity
{
    //    public double unnormalizedConditionalDensity( Object state ) { return density( state, conditions ) };
    //    public double logUnnormalizedConditionalDensity( Object state ){ return logConditionalDensity( state, conditions ) };
    public double conditionalDensity   ( Object state, Object conditions ); // { return Math.exp( logConditionalDensity(state, conditions) ); }   
    public double logConditionalDensity( Object state, Object conditions ); 

    public double UPDF   ( Object stat, Object conditionse );    // { return density(state, conditions); }
    public double logUPDF( Object state, Object conditions );    // { return logConditionalDensity(state, conditions); }
}

@ %def 



  
<<CumulativeConditionalDensity.java>>=

<<Copyright>>
<<Package>>
<<Imports>>

public interface CumulativeConditionalDensity 
{
    //    public double unnormalizedConditionalDensity( Object state, Object conditions ) 
    //    { 
    //      return density( state, conditions ) 
    //    };
    //
    //    public double logUnnormalizedConditionalDensity( Object state, Object conditions )
    //    { 
    //      return logConditionalDensity( state, conditions ) 
    //    };

    public double cumulativeConditionalDensity( Object state, Object conditions );  
    // { 
    //   return Math.exp( logCumulativeConditionalDensity(state), conditions ); 
    // }   

    public double logCumulativeConditionalDensity( Object state, Object conditions );
}

@ %def 


<<Univariate>>=

public interface Univariate;

@ %def 

<<Bivariate>>=

public interface Bivariate;

@ %def 

<<Discrete>>=

public interface Discrete;

@ %def 

<<Continuous>>=

public interface Continuous;

@ %def 



