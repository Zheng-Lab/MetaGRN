@
<<*>>=
package org.omegahat.Simulation.RandomGenerators;

/**
 * creates instances of CollingsPRNG that are garanteed to be mutually
 * independent
 *
 * @author  Greg Warnes
 * @author  $Author: warneg $
 * @version $Revision: 1.1.1.1 $, $Date: 2001/04/04 17:16:34 $
 */

<<Imports>>


public class CollingsParallelAdministrator implements PRNGAdministrator 
{
    /** 
     * Seed for the congruential generator used to pick the
     * multiplicative constants and to intialize the seeds for each
     * component generator.
     *
     * <body>
     * This seed must be in [1,2^32-1] 
     * </body>
     */
    private int Seed   = 3141579;
    
    /** 
     * Multiplicative constant for the congruential generator used to pick the
     * multiplicative constants and to intialize the seeds for each
     * component generator.
     */
    private int Mult   = CollingsPRNGConstants.pool[0];
    
    
    /** 
     * Modulus constant for the congruential generator used to pick the
     * multiplicative constants and to intialize the seeds for each
     * component generator.
     */
    private static int Mod = CollingsPRNGConstants.Modulus;

    /**
     * Number of generators that each CollingsPRNG will use 
     */
    private int NumGen = 64;  /* # of component random generators per stream */

    /**
     * Multiplicative Congruential Generator used by the administrator
     * to select constants and seeds for the created CollingsPRNG's. 
     *
     * <body> 
     * This is NOT the seed used for the created CollingsPRNG's, rather
     *        it is used to select those seeds.
     * </body>
     */
     MultiplicativeCongruential LC = 
         new MultiplicativeCongruential(Seed,Mult,Mod);

    
    /**
     * Default Class Constructor 
     */
    public CollingsParallelAdministrator()
    {
    }

    /** 
     * Class constructer that allows specification of the seed used
     * to intialize the state of the created PRNG's 
     * @param seed seed value used for initializing constructed generators
     */
    public CollingsParallelAdministrator(int seed) 
    { 
        Seed = seed; 
    }
  
    /** 
     * Class constructer that allows specification of the seed used to
     * intialize the state of the created PRNG's, and the number of
     * component generators used by each CollingsPRNG created.
     *
     * @param seed seed value used for initializing constructed generators
     * @param numGen the number of component generators used by each
     * constructed generator 
     */
    public CollingsParallelAdministrator(int seed, int numGen)
    {
        Seed = seed;
        NumGen = numGen;
    }
    
    /** 
     * Class constructer that allows specification of the seed used to
     * intialize the state of the created PRNG's, the number of
     * component generators used by each CollingsPRNG created.
     *
     * @param seed seed value used for initializing constructed generators
     * @param numGen the number of component generators used by each
     * constructed generator 
     * @param mult multiplicative constant for PRNG used for initialization
     */
    public CollingsParallelAdministrator(int seed, int numGen, int mult)
    {
        Seed = seed;
        NumGen = numGen;
        Mult = mult;
    }
    
    public int getSeed()
    {
        return Seed;
    }
    
    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      DO NOT PROVIDE set METHODS BECAUSE MESSING WITH THE INTERNAL
      STATE OF THE ADMINISTRATOR CAN INVALIDATE THE PROMISE THAT EACH
      STREAM IS INDEPENDENT.  USE OF NON-DEFAULT VALUES IS ONLY
      PERMITTED AT TIME OF INSTANTIATION.
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
    
    public int getNumGen()
    {
        return NumGen;
    }
    
    public int getMult()
    {
        return Mult;
    }


   private PRNGState makeGeneratorState()
     {
       CollingsPRNGState newGen = new CollingsPRNGState();
 
       /* Store Generator Parameters */

       newGen.PRNGName ="org.omegahat.Simulation.RandomGenerators.CollingsPRNG";
       newGen.NumGen = NumGen;
 
       /* Initialize the Mixing Generator */
       newGen.MixerSeed = LC.nextInt();
       newGen.MixerMult = CollingsPRNGConstants.pool[ (int)
                                      (LC.nextDouble() *
                                       CollingsPRNGConstants.pool.length-1) ];
       /* Initialize Each of the NumGen Generators */
       newGen.ComponentSeed = new int[NumGen];
       newGen.ComponentMult = new int[NumGen];
       for (int n=0; n<NumGen; n++)
       {
         newGen.ComponentSeed[n] =  LC.nextInt();
         newGen.ComponentMult[n] =  CollingsPRNGConstants.pool[ (int)
                                       (LC.nextDouble() *
                                       CollingsPRNGConstants.pool.length-1) ];
       }
 
       return (PRNGState) newGen;
     }

    
    
    /*
     * Obtain and Register a PRNGState
     */

    public PRNGState registerGeneratorState( )
    {
        CollingsPRNGState RNG = (CollingsPRNGState) makeGeneratorState();

        if(listeners() != null) {
           notifyListeners(RNG);
        }
        return RNG;
    }
     
    /*
     * @param ignored has no effect.
     */
    public PRNGState registerGeneratorState( Object ignored )
    {
        return registerGeneratorState();
    }


<<Fields>>
<<Notify Listeners>>
<<Listener Management>>
<<Field Accessors>>
}


@ 
Here we provide methods to register and remove 
listeners which are notified of \OmegaInterface{PRNGState} allocations.
<<Listener Management>>=
public int addListener(PRNGAdministratorListener l) {
 if(listeners() == null) {
    listeners( new java.util.Vector(1));
 }

  listeners().addElement(l);

 return(listeners().size());
}

public boolean removeListener(PRNGAdministratorListener l) {

 if(listeners() == null || listeners().contains(l))
  return(false);

 listeners().remove(l);

return(true);
}

@
Here we notify the listeners that a \OmegaInterface{PRNGState} has been allocated.
<<Notify Listeners>>=
public void notifyListeners(PRNGState state)
{
  PRNGAdministratorEvent event = new PRNGAdministratorEvent(state, this);
  for(java.util.Enumeration e = listeners().elements() ; e.hasMoreElements() ; ) {
    ((PRNGAdministratorListener) e.nextElement()).PRNGStateRegistered(event);
  }
}

@ 
This stores the different listeners that are registered
to be notified of events in the form of state
allocation.
<<Fields>>=
    protected java.util.Vector listeners;


@ 
This provides access to the listeners vector.
<<Field Accessors>>=
public java.util.Vector listeners() {
  return(listeners);
}

public java.util.Vector listeners(Vector v) {
   listeners = v;
  return(listeners());
}

 



@ 
<<Imports>>=
import java.util.Vector; // for the listeners.
