<<*>>=
package org.omegahat.Simulation.RandomGenerators;


/**
 * provide a stream of pseudo-random numbers using Collings Parallel
 * Pseudo Random Number Generator.
 *
 * @author  Greg Warnes
 * @author  $Author: warneg $
 * @version $Revision: 1.1.1.1 $, $Date: 2001/04/04 17:16:33 $
 */
public class CollingsPRNG 
          extends NotifyingPRNG
          implements PRNG 
{

    /** if true, show debugging messages */
    public boolean debug = false;

    /** Number of generators in the pool */
    int NumGen;

    /** Multiplicative constant for mixing generator */
    int MixerMult;

    /** Seed for mixing generator */
    int MixerSeed;

    /** Multiplicative constants for component generators */
    int ComponentMult[];

    /** Seeds for component generators */
    int ComponentSeed[];

    /** Modulus constant for all generators */
    static int Mod = CollingsPRNGConstants.Modulus;

    /*-------------*/
    /* Constructor */
    /*-------------*/

    /** instantiate from a specified PRNGState */
    public CollingsPRNG( PRNGState state )
    {
       /* Store Generator Parameters */
       CollingsPRNGState cState = (CollingsPRNGState) state;

       NumGen = cState.NumGen;
 
       /* Initialize the Mixing Generator */
       MixerSeed = cState.MixerSeed;
       MixerMult = cState.MixerMult;

       /* Initialize Each of the NumGen Generators */
       ComponentSeed = new int[NumGen];
       System.arraycopy(cState.ComponentSeed, 0,
			ComponentSeed, 0,
			NumGen);

       ComponentMult = new int[NumGen];
       System.arraycopy(cState.ComponentMult, 0,
			ComponentMult, 0,
			NumGen);

     }

    /** Instantiate from state details (needed for CORBA). */
    public CollingsPRNG( int   in_NumGen, 
	                 int   in_MixerMult,
			 int   in_MixerSeed,
			 int[] in_ComponentMult,
			 int[] in_ComponentSeed)
     {
       /* Store Generator Parameters */
       NumGen = in_NumGen;
 
       /* Initialize the Mixing Generator */
       MixerSeed = in_MixerSeed;
       MixerMult = in_MixerMult;

       /* Initialize Each of the NumGen Generators */
       ComponentSeed = new int[NumGen];
       System.arraycopy(in_ComponentSeed, 0,
			ComponentSeed, 0,
			NumGen);

       ComponentMult = new int[NumGen];
       System.arraycopy(in_ComponentMult, 0,
			ComponentMult, 0,
			NumGen);

     }



    /*-----------------------------*/
    /* Provide information methods */
    /*-----------------------------*/
    
    public PRNGState getState()
    {
	CollingsPRNGState State = new  CollingsPRNGState();
	State.NumGen = NumGen;
	State.MixerMult=MixerMult;
	State.MixerSeed=MixerSeed;
	State.ComponentMult = ComponentMult; 
	State.ComponentSeed = ComponentSeed;
	
	return (PRNGState) State;
    }
      

    public double  getDoubleEpsilon()
    {
	return 1.0 / (double) Mod;
    }
    
    public int getIntRange()
    {
	return CollingsPRNGConstants.Modulus;
    }
    
    /*-------------------*/
    /* Utility Functions */
    /*-------------------*/

    /**
     * Compute next value using multiplicative congruential formula.
     *
     * <body>
     * The next value is computed using the formula:
     * <b>
     * X[t+1] = X[t] * mult % mod
     * <b>
     * </body>
     * 
     *
     * @param seed Seed value in [1, 2^31-1]
     * @param mult Multiplicative constant
     * @param mod  Modulus
     */
    private int multCong(int seed, 
					   int mult,
					   int mod)
    {
	return (int) (( (long) seed * (long) mult ) % (long) mod);
    }

    
    /**
     * Generate an int using the <b>mixing</b> generator.
     */
    int nextMixerInt()
    {
	MixerSeed = multCong( MixerSeed, MixerMult, Mod );
	return MixerSeed;
    }

    /**
     * Generate a double on [0,1) using the <b>mixing</b> generator.
     *
     */
    double nextMixerDouble()
    {
	MixerSeed = multCong( MixerSeed, MixerMult, Mod );
	return (double) MixerSeed / (double) Mod;
    }

    /**
     * Generate an int using pool generator <b>which</b>.
     *
     * @param which which of the generators in the pool should be used to
     *              compute the next pseudo-random deviate 
     */
    int nextComponentInt( int which )
    {
      ComponentSeed[which] = multCong( ComponentSeed[which], 
					  ComponentMult[which],
					  Mod );
      return ComponentSeed[which];
    }

    /**
     * Generate a double on [0,1] using pool generator <b>which</b>.
     *
     * @param which which of the generators in the pool should be used to
     *              compute the next pseudo-random deviate 
     */
    double nextComponentDouble( int which )
    {
	
	ComponentSeed[which] = multCong( ComponentSeed[which], 
					 ComponentMult[which],
					 Mod );
	return (double) ComponentSeed[which] / (double) Mod;
    }

 
    /*------------------*/
    /* Public Functions */
    /*------------------*/



    /**
     * Generate a single pseudo-random integer
     */
    public int nextInt()
    {
	int which;
	
	/* Randomly choose one of the NumGen random number generators */
		which = (int) (nextMixerDouble() * NumGen);
	//	which = (int) (nextMixerInt() >> (31-5) ); // * NumGen);
	
	if (debug) System.out.println("Which="+which);
	
	/* Return the appropriate randum number from the generator */
	return (int) nextComponentInt( which );
    }

    /**
     * Generate <b>num</b> pseudo-random integers
     * @param num number of values to return
     * @return an array of integers of length <b>num</b>
     */
    public int[] nextIntArray(int num)
    {
      int[] retval = new int[num];

      for(int n = 0; n<num; n++)
	retval[n] = nextInt();

      return(retval);
    }
  

    /**
     * Generate a single pseudo-random double on [0,1)
     */
    public double nextDouble()
    {
	int which;
	
	/* Randomly choose one of the NumGen random number generators */
	which = (int) (nextMixerDouble() * NumGen);
	
	if (debug) System.out.println("Which="+which);
	
	/* Return the appropriate randum number from the generator */
	return nextComponentDouble( which );
    }
    
    /**
     * Generate <b>num</b> pseudo-random doubles on (0,1]
     * @param num number of values to return
     * @return an array of doubles of length <b>num</b>
     */
    public double[] nextDoubleArray(int num)
    {
	double[] retval = new double[num];
	
	for(int n = 0; n<num; n++)
	    retval[n] = nextDouble();
	
	return retval;
    }
  
    /**
     * To test, generate 10 integers
     */
    public static void main(String argv[]) throws Exception
    {
	CollingsPRNGAdministrator admin = new CollingsPRNGAdministrator();
	
	PRNGState state = admin.registerPRNGState();

	String name     = state.getPRNGName();

	Class cl        = Class.forName(name);

	Class classes[] = new Class[1];
	classes[0]      = Class.forName("org.omegahat.Simulation.RandomGenerators.PRNGState");

	java.lang.reflect.Constructor   c = cl.getConstructor(classes);

	Object[] args = new Object[1];
	args[0] = state;

	PRNG prng = (PRNG)
	  c.newInstance(args);

	for(int a=1; a<10; a++)
	    System.out.println(prng.nextInt());
	
    }
}
