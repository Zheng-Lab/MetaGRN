@

\title{Adding a New Pseudo-Random Number Generator to the \OmegaPackage{Simulation.RandomGenerators} }
\author{Gregory R. Warnes}
\date{$Revision: 1.1.1.1 $ $Date: 2001/04/04 17:16:35 $}

\maketitle

\section{Introduction}  

The \OmegaPackage{Simulation.RandomGenerators} package is designed to
provide interfaces and classes for generating pseudo-random numbers in
an distributed environment.  The \Java{PRNGAdministrator} coordonates
how the individual pseudo-random number generators (PNRG's) are
created with the intent of that each will provides independent or
nearly-indepenent random streams.  

This document describes the process of implementing a new PNRG using
this package.  We use the 48 bit linear congruential generator with
prime addend described by Srinivasan, Ceperley, and Mascagni (1998) and
implemented in the thier software package ``SPRNG''.


\section{Overview}

Adding a new generator class to the
\OmegaPackage{Simulation.RandomGenerators} package requires you to:
\begin{enumerate}

\item Create a class that implements \OmegaInterface{PRNGAdministrator}.

\item Create a class that implements \OmegaInterface{PRNGState}.

\item Create a class that implements  \OmegaInterface{PRNG}.

\item Extend the class \OmegaClass{DefaultPRNGFactory} to handle the 
	new generator (recommended) or provide your own class
	implementing \OmegaIterface{PRNGFactory}.

\item Add the classes you create to the makefile.

\end{enumerate}

If you wish to provide access to your generator through CORBA
you will also need to 
\begin{enumerate}

\item Add IDL for the PRNGState you define for your class to 
	\file{CorbaPRNGUtil.idl}.

\item Create a class inheriting from
	\OmegaClass{CorbaPRNGAdministrator} that can call the
	appropriate \OmegaInterface{PRNGAdministrator}.

\item Create a class inheriting from 

implementing ...

!!!!!!!!!!!!!

\section{The Example Generator}

The 48 bit bit linear congruential generator with prime addend
generates the next pseudo-random value using the recurrence relation
\begin{equation}
x_n =  ( a \times x_{n-1} + p ) mod 2^48
\end{equation}
where $a$ is the multiplicative constant, $p$ is a prime number, and
$x_{n-1}$ is the current seed value.

Each generators is initialized with a different value for the prime
constant $p$.  According to Macagni, et al, there are on the order of
$2^19$ values of $p$, and consequently $2^19$ distinct streams.  The
period of this generator is $2^48$.

Macagni, et al, provide a complicated scheme for assigning the prime
values in order to minimize startup communication and avoid the use of
a central administrator.  Our implementation, following the
\OmegaPackage{Simulation.RandomGenerators} interface, relies on a
central administrator and this simply assigns each generator the next
available prime.






<<*>>


















