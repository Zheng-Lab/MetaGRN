This class serves as a generic MCMCState that can hold arbitrary
objects.  It provides methods for getting its contents and for
creating a new ContainerState from a supplied object.  Note that it
provides no methods for changing the contents, and hence is immutable.

<<*>>=

<<Package>>
<<Imports>>

/**
 * A generic MCMCState that can hold arbitrary Objects 
 */
public class ContainerState implements MCMCState
{
    <<Fields>>
    <<Accessors>>
    <<Constructors>>
    <<Methods>>
    <<Main>>
}
@

<<Fields>>=

protected Object contents;

@ %def 

<<Accessors>>=

public Object getContents() { return contents; }

@ %def 


<<Constructors>>=

public ContainerState( Object contents )
{
    this.contents = contents;
}

@ %def 

<<Methods>>=

protected String arrayToString()
{
    Object[] array = (Object[]) contents;

    String retval = "[ ";
    for(int i = 0; i < array.length; i++)
        retval += array[i].toString() + " ";
    retval += "]";

    return retval;
}

public String toString()
{

  String contentsString = "ContainerState: " ;
       
  try
    {
      int len = Array.getLength( contents );
      
      contentsString += "[ ";
      
      for(int j = 0; j < len ; j++)
        {
          contentsString += Array.get(contents,j) + " ";
        }
      
      contentsString += "] ";
    }
  catch ( Throwable e )
    {
              contentsString = contents.toString();
    }
  
  
  return contentsString;
  
}

@ %def 

<<Main>>=

    /* none */

@ %def 

<<Package>>=

  package org.omegahat.Simulation.MCMC;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;


    import java.lang.reflect.Array;

@ %def 
