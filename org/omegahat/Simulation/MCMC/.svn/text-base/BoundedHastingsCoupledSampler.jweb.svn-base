
This extends [[CustomHastingsCoupledSampler]] by allowing boundaries
to be set for each dimension. If a proposal generates a point outside
the boundaries, the proposal is rejected.

<<Copyright>>=

 /* $Header: /cvsroot/hydra-mcmc/Hydra/org/omegahat/Simulation/MCMC/BoundedHastingsCoupledSampler.jweb,v 1.1.1.1 2001/04/04 17:16:17 warneg Exp $ */

 /* (c) 2000 Gregory R. Warnes */ 
 /* May also contain code (c) 1999 The Omegahat Project */



@ %def 

<<*>>=

<<Copyright>>
<<Package>>
<<Imports>>

/**  
 * This extends <code>CustomHastingsCoupledSampler</code> by allowing boundaries to be set for each 
 * dimension.  If a proposal generates a point outside the boundaries, the proposal is rejected.
**/
public class BoundedHastingsCoupledSampler extends CustomHastingsCoupledSampler
{

    <<Fields>>
    <<Accessors>>
    <<Constructors>>
    <<Methods implementing ConditionalGenerator>>
    <<Methods implementing MarkovChain>>
    <<Internal Methods>>
    <<Main>> }
@

<<Fields>>=

protected double[] minVals;
protected double[] maxVals;

@


<<Accessors>>=

public double[] getMinVals() { return this.minVals; }
public double[] setMinVals( double[] mins ) { return this.minVals = mins; }


public double[] getMaxVals() { return this.maxVals; }
public double[] setMaxVals( double[] maxs ) { return this.maxVals = maxs; }


@ %def



<<Methods implementing ConditionalGenerator>>=

/* inherited */   


@

<<Internal Methods>>=



protected double acceptanceProb( Object current,  MultiState currentStateVector,
                                    Object proposed, MultiState proposedStateVector,
                                    int which
                                 )
{
    double[] proposedArr = ArrayTools.Otod( proposed );
    
     for(int i=0; i < proposedArr.length; i++)
       if( (proposedArr[i] < minVals[i]) || (proposedArr[i] > maxVals[i]) || Double.isNaN(proposedArr[i] ) )
	   {
	       if (DEBUG) System.err.println("Boundary Exceeded, acceptance prob set to 0.0.");
	       if (DEBUG) System.err.println("Proposed component " +  i + " is " + proposedArr[i] );
	       if (DEBUG) System.err.println("Boundary values are " +  minVals[i] + " to " + maxVals[i] );

	       
	       logAcceptProb = Double.NEGATIVE_INFINITY;
	       uniformRand = Double.NaN;
	       accepted = false;
	       log_p_X = Double.NaN;
	       log_q_X_to_Y = Double.NaN;
	       log_p_Y = Double.NaN;
	       log_q_Y_to_X = Double.NaN;


	      return 0.0;
	   }

    return super.acceptanceProb( current, currentStateVector,  
				 proposed, proposedStateVector, which );
}


protected double logAcceptanceProb( Object current,  MultiState currentStateVector,
                                    Object proposed, MultiState proposedStateVector,
                                    int which
                                 )
{
    double[] proposedArr = ArrayTools.Otod( proposed );
    
     for(int i=0; i < proposedArr.length; i++)
       if( (proposedArr[i] < minVals[i]) || (proposedArr[i] > maxVals[i]) || Double.isNaN(proposedArr[i] ) ) 
	   {
	       if (DEBUG) System.err.println("Boundary Exceeded, acceptance prob set to 0.0.");
	       if (DEBUG) System.err.println("Proposed component " +  i + " is " + proposedArr[i] );
	       if ( DEBUG) System.err.println("Boundary values are " +  minVals[i] + " to " + maxVals[i] );

	       logAcceptProb = Double.NEGATIVE_INFINITY;
	       uniformRand = Double.NaN;
	       accepted = false;
	       log_p_X = Double.NaN;
	       log_q_X_to_Y = Double.NaN;
	       log_p_Y = Double.NaN;
	       log_q_Y_to_X = Double.NaN;



	       return Double.NEGATIVE_INFINITY;
	   }

    return super.logAcceptanceProb( current, currentStateVector,  
				    proposed, proposedStateVector, which );
}


@

<<Methods implementing MarkovChain>>=

/* inherited */

@



<<Constructors>>=

public BoundedHastingsCoupledSampler( MultiState                  state, 
                                      int                         numSamplers,
                                      UnnormalizedDensity         target, 
                                      HastingsCoupledProposal     proposal, 
                                      PRNG                        prng,
                                      double[]                    minVals,
                                      double[]                    maxVals,
                                      boolean                     detailed)
{
  super( state, numSamplers, target, proposal, prng, detailed );
  this.minVals = minVals;
  this.maxVals = maxVals;
}

public BoundedHastingsCoupledSampler( MultiState               state, 
				      int                      numSamplers,
				      UnnormalizedDensity      target, 
				      HastingsCoupledProposal  proposal, 
				      double[]                 minVals,
				      double[]                 maxVals,
				      PRNG                     prng)
{
    this(state, numSamplers, target, proposal, prng, minVals, maxVals, false);
}


@ %def 

<<Main>>=

@ %def 



<<Package>>=

    package org.omegahat.Simulation.MCMC;

@ %def 

<<Imports>>=


import org.omegahat.Simulation.MCMC.Proposals.*;
import org.omegahat.Simulation.MCMC.Targets.*;
import org.omegahat.Simulation.MCMC.Listeners.*;
import org.omegahat.Probability.Distributions.*;
import org.omegahat.Simulation.RandomGenerators.PRNG;
import org.omegahat.GUtilities.ArrayTools;


@ %def 

