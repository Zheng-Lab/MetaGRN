
This file implements [[NotifyingMCMCObject]], a class providing
default implementations for the interface [[NotifyingObject]].


<<Copyright>>=

/* $Header: /cvsroot/hydra-mcmc/Hydra/org/omegahat/Simulation/MCMC/NotifyingMCMCObject.jweb,v 1.1.1.1 2001/04/04 17:16:17 warneg Exp $  */
/* (c) 1999 by the Omegahat Project */

@ %def 

<<*>>=

<<Copyright>>
<<Package>>
<<Imports>>

/** 
 *  A simple class providing methods implementing the interface NotifyingObject
 */
abstract public class NotifyingMCMCObject implements NotifyingObject
{

    <<Fields>>
    <<Methods implementing NotifyingObject>>
    <<New Methods>>
}

@
<<Fields>>=
    
    protected Hashtable listeners = new Hashtable();  

@

<<Methods implementing NotifyingObject>>=

    public class MyHandle implements MCMCListenerHandle
    {
	public MyHandle() {};
    }

    // we can always register and unregister listeners
    public MCMCListenerHandle registerListener  ( MCMCListener  listener ) 
    { 

        MCMCListenerHandle handle = new MyHandle();

        listeners.put( handle,  listener); 
        return handle;
    }
    public void    unregisterListener( MCMCListenerHandle handle   )
    { 
        listeners.remove( handle );
    }
    
    protected void   notifyAll( MCMCEvent e )
     {
       MCMCListener l = null;
    
       Enumeration iterator = listeners.elements();
       while( iterator.hasMoreElements() )
       {   
          l = (MCMCListener) iterator.nextElement();
          if( l != null) l.notify( e );
       }
     }




@ %def 


<<New Methods>>=

    /** Generate the next state from the current one */
    abstract protected MCMCState generate( MCMCState current );

@ %def 



<<Package>>=

    package org.omegahat.Simulation.MCMC;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;

    import java.util.*;

@ %def 

