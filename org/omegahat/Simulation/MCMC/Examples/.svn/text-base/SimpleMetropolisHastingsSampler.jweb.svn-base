

<<Copyright>>=

/* $Header: /cvsroot/hydra-mcmc/Hydra/org/omegahat/Simulation/MCMC/Examples/SimpleMetropolisHastingsSampler.jweb,v 1.1.1.1 2001/04/04 17:16:18 warneg Exp $  */
/* (c) 1999 by the Omegahat Project */

@ %def 

This file illustrates a very simple MetropolisHastings Sampler.  It simulates from
the bivariate normal distribution $ BvN( \underbar{0}, \Sigma ) $ where 
\[\Sigma = \sigma^2 \left ( \begin{array}{c c} 1 & \rho \\ \rho & 1 \end{arrayc} \right ). \]

The proposal distribution for each component is $ N( -\mbox{current} , \delta )^2 $

<<*>>=

<<Copyright>>
<<Package>>
<<Imports>>

/**
 * A simple Markov Chain example. It simply generates
 * its next state from N(0,1) regardless of the current state.
 */
public class SimpleMetropolisHastingsSampler extends BaseMarkovChain
{
    <<Fields>>
    <<Local Classes>>
    <<Methods>>
    <<Main>>
}
@

<<Fields>>=

protected double              sigma = 1.0;  // standard deviation
protected double              rho   = 0.5;  // correlation
protected double              delta = 2.0;  // standard deviation of the proposal distribution

protected PRNG                prng;
protected Normal              norm;

protected BivariateDoubleState state;

@

<<Local Classes>>=

protected class BivariateDoubleState implements MCMCState
{
    double[] state = new double[2];
    public double[] getState() { return state; }
    public String   toString() { return " (" + state[0] + "," + state[1] + ")"; }

    // constructor
    public BivariateDoubleState( double[] d ) { state = d; }

}

@ %def 

<<Methods>>=

protected double square(double x) { return x*x; }

protected double bivariateDensity( double[] bvstate )
{
    double x = bvstate[0];
    double y = bvstate[1];

    return  // 1/Math.sqrt(2 * Math.PI ) * square( 1 / (1 - square( rho ) ) )  
            //  * 
            Math.exp( -1./2. * ( square(x) - 2. * rho * x * y + square(y) ) / ( 1. - square(rho) ) );
}

protected double transitionDensity( double[] from , double[] to )
{
    double z1 = (to[0]- (-from[0])) / delta;
    double z2 = (to[1]- (-from[1])) / delta;

    return  norm.PDF( new Double(z1) ) * norm.PDF( new Double(z2) );
}

// probability of generating from normals centered at (-x, -y)
protected double acceptanceProb( double[] current, double[] proposed )
{
    return  Math.min( 1, bivariateDensity( proposed ) / bivariateDensity ( current ) *
                         transitionDensity( proposed, current ) / transitionDensity( current, proposed)  );
}


// generate from normals centered at (-x,-y)
public MCMCState generate( MCMCState state )
{
    double[] current = ((BivariateDoubleState) state).getState() ;
    double[] proposed = new double[2];

    proposed[0] = norm.generateDouble() * delta - current[0];
    proposed[1] = norm.generateDouble() * delta - current[1];

    double acceptProb = acceptanceProb( current, proposed ) ;
    double u = prng.nextDouble();

    //        System.err.println("acceptProb = " + acceptProb + "\t u=" + u );
    //        System.err.println("current = " + current[0] + "," + current[1] + " Prob = " + bivariateDensity ( current ) );
    //        System.err.println("proposed = " + proposed[0] + "," + proposed[1] + " Prob = " + bivariateDensity ( proposed ) );

    if (  u < acceptProb )
        {
            System.arraycopy( proposed, 0, 
                              current, 0,
                              2 );
        }

    return new BivariateDoubleState( current );

}

public SimpleMetropolisHastingsSampler( PRNG prng, double sigma, double rho, double delta )
{
    this.prng = prng;
    this.norm = new Normal ( prng );
    this.sigma = sigma;
    this.rho = rho;
    this.delta = delta;
    this.state = new BivariateDoubleState( new double[]{0.0,0.0} );
}


@

<<Main>>=



    public static class listenerPrinter implements MCMCListener
    {
        public int step=0;
        public void notify( MCMCEvent e ){
            if( e instanceof GenericChainStepEvent )
                System.out.println( step + "," + ((GenericChainStepEvent) e).getCurrent() );
            else
                System.out.println("** Notify: Unrecognized Event ** ");
        }
    }


    public static void main( String[] argv )
    {
        PRNG prng = new CollingsPRNG( (new CollingsPRNGAdministrator()).registerPRNGState() );

        BaseMarkovChain chain = new SimpleMetropolisHastingsSampler(prng, 1.0, 0.95, 2.0/3.0 );
        chain.registerListener( new listenerPrinter() );

        int numiter = Integer.parseInt( argv[0] );

        System.err.println( "Doing " + numiter + " iterations.");
        chain.iterate( numiter );
        System.err.println( "Finished." );
    }

@ %def 

<<Package>>=

    package org.omegahat.Simulation.MCMC.Examples;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.*;
    import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Expressions.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;
    import org.omegahat.Probability.Distributions.*;
    import org.omegahat.Simulation.RandomGenerators.*;

@ %def 


