

<<Copyright>>=

/* $Header: /cvsroot/hydra-mcmc/Hydra/org/omegahat/Simulation/MCMC/Examples/SimpleGibbsSampler.jweb,v 1.1.1.1 2001/04/04 17:16:18 warneg Exp $  */
/* (c) 1999 by the Omegahat Project */

@ %def 

This file illustrates a very simple Gibbs Sampler.  It simulates from
the bivariate normal distribution $ BvN( \underbar{0}, \Sigma ) $ where 
$ \Sigma = \sigma^2 I $.  That is, from two indepenent normal distributions

The full conditional for each components $\theta_1$ is trivialy $N(0,\sigma^2)$.


<<*>>=

<<Copyright>>
<<Package>>
<<Imports>>

/**
 * A simple Markov Chain example. It simply generates
 * its next state from N(0,1) regardless of the current state.
 */
public class SimpleGibbsSampler extends BaseMarkovChain
{
    <<Fields>>
    <<Local Classes>>
    <<Methods>>
    <<Main>>
}
@

<<Fields>>=

protected double              sigma = 1.0;  // standard deviation
protected double              rho   = 0.5;  // correlation

protected PRNG                prng;
protected Normal              norm;

protected BivariateDoubleState state;

@

<<Local Classes>>=

protected class BivariateDoubleState implements MCMCState
{
    double[] state = new double[2];
    public double[] getState() { return state; }
    public String   toString() { return " (" + state[0] + "," + state[1] + ")"; }

    // constructor
    public BivariateDoubleState( double[] d ) { state = d; }

}

@ %def 

<<Methods>>=

public MCMCState generate( MCMCState current )
{
    double[] state = ((BivariateDoubleState) current).getState() ;

    state[0] = norm.generateDouble() * sigma;
    state[1] = norm.generateDouble() * sigma;

    return new BivariateDoubleState( state );

}

public SimpleGibbsSampler( PRNG prng, double sigma, double rho )
{
    this.prng = prng;
    this.norm = new Normal ( prng );
    this.sigma = sigma;
    this.rho = rho;
    this.state = new BivariateDoubleState( new double[]{0.0,0.0} );
}


@

<<Main>>=



//     public static class listenerPrinter implements MCMCListener
//     {
//         public int step=0;
//         public void notify( MCMCEvent e ){
//             if( e instanceof GenericChainStepEvent )
//                 {
//                     step++;
//                     System.out.println("** Notify : Chain Step Event #" + step + " ** ");
//                 }
//             else
//                 System.out.println("** Notify: Unrecognized Event ** ");
//             System.out.println("** Details:");
//             System.out.println( e );
//         }
//     }

    public static class listenerPrinter implements MCMCListener
    {
        public int step=0;
        public void notify( MCMCEvent e ){
            if( e instanceof GenericChainStepEvent )
		System.out.println( step + "," + ((GenericChainStepEvent) e).getCurrent() );
            else
                System.out.println("** Notify: Unrecognized Event ** ");
        }
    }

    public static void main( String[] argv )
    {
        PRNG prng = new CollingsPRNG( (new CollingsPRNGAdministrator()).registerPRNGState() );

        BaseMarkovChain chain = new SimpleGibbsSampler(prng, 1.0, 0.5 );
        chain.registerListener( new listenerPrinter() );

	int numiter = Integer.parseInt( argv[0] );

	System.err.println( "Doing " + numiter + " iterations.");
        chain.iterate( numiter );
        System.err.println( "Finished." );

    }

@ %def 

<<Package>>=

    package org.omegahat.Simulation.MCMC.Examples;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.*;
    import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Expressions.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;
    import org.omegahat.Probability.Distributions.*;
    import org.omegahat.Simulation.RandomGenerators.*;

@ %def 


