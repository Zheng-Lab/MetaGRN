This class provides the basic functionality of a univariate histogram
with pre-specified range and number of bins.  It is designed to allow
very simple updating via a single call [[upodate()]].

<<*>>=

<<Package>>
<<Imports>>

public class Histogram 
{
    <<Fields>>
    <<Accessors>>
    <<Constructors>>
    <<Methods>>
    <<Main>>
}
@

<<Fields>>=

protected  int[]    histData;
protected  int      howmany = 0;
protected  double   min;
protected  double   max;
protected  double   step;


@ %def 

<<Accessors>>=
    
public int[]    get() {return histData;}
public double   min() {return min;}
public double   max() {return max;}
public double   step() {return step;}
public int      numBins() { return histData.length; }
public int      howmany() { return howmany; }

@ %def 

<<Create Histogram From Min, Max and number of Bins>>=
  
      histData = new int[numBins];
      this.min = min;
      this.max = max;
      this.step = ((double) (max - min)) / (double) (numBins);

      for(int j=0; j < numBins; j++)  
        histData[j] = 0;
      howmany = 0;

@ %def 


<<Constructors>>=

public Histogram( double min, double max, int numBins )
{
  <<Create Histogram From Min, Max and number of Bins>>
}

public Histogram( double min, double max, double by )
{
      histData = new int[(int) (((double) (max - min)) / by + 0.5)];
      this.min = min;
      this.max = max;
      this.step = by;

      for(int j=0; j < histData.length; j++)  
        histData[j] = 0;
      howmany = 0;

}


public Histogram( double[] data, int numBins )
{
  double min = data[0];
  double max = data[0];

  for(int i=0; i<data.length; i++)
    {
      if ( data[i] < min) 
	min=data[i];
      else if (data[i] > max)  
	max=data[i];
    }

  double margin = (max - min) / (double) (numBins -1) / 2.;
  min = min - margin;
  max = max + margin;

  <<Create Histogram From Min, Max and number of Bins>>

  this.update( data );
}

@ %def 

<<Methods>>=

public void update( double data )
{
  int which = (int) ((data - min) / step);
  if(which < 0) 
    which=0;
  else if(which >= histData.length) 
    which = histData.length - 1;
  
  histData[which]++;
  howmany++;
}

public void update( Double data )
{
  update( data.doubleValue() );
}

public void update( double[] data )
{
  for(int i=0; i < data.length; i++)
    update( data[i] );
}


public void update( Double[] data )
{
  for(int i=0; i < data.length; i++)
    update( data[i].doubleValue() );
}


public String toString(String title,
		       String prefix,
		       String rangeSep,
		       String histSep,
		       String postfix,
		       String trailer)
{
  String retval = title;
  int    cumFreq = 0;
  double cumProb = 0;

  for(int i=0; i<histData.length; i++)
    {
      //      if (i == 0)
      //	retval += "Below " + ( min + step * ( (double) (i+1) ) ) ;
      //      else if (i == (histData.length - 1))
      //	retval +=  ( min + step * ( (double) i ) ) + " and Above " ;
      //      else 
      //	{
      retval += prefix;
      retval += ( min + step * (double) i );
      retval += rangeSep;
      retval += ( min + step * ( (double) (i+1) ) ) ;
	  //	}
      retval += histSep;
      retval += histData[i]; 
      retval += histSep;
      retval += ( cumFreq += histData[i] );
      retval += histSep;
      retval += ( ((double) histData[i]) / ((double) howmany) ) ; 
      retval += histSep;
      retval += ( cumProb += ((double) histData[i]) / ((double) howmany) ) ; 
      retval += postfix;
    }
  retval += trailer;
  return retval;
}

public String toString()
{
    return toString("Histogram:\n", // title
		    "",             // prefix
		    " to ",         // rangeSep
		    " : \t",    // histSep
		    "\n",           // postfix
		    "\n"            // trailer
		    );
}




public double[][] frequency()
{
  double[][] retval = new double[histData.length][3];
  
  for(int i=0; i < histData.length; i++ )
  {
    retval[i][0] = ( min + step * (double) i ); // lower 
    retval[i][1] = ( min + step * ( (double) (i+1) ) ) ; // upper
    retval[i][2] = histData[i]; // frequency
  }
  
  return retval;
}


public double[][] probability()
{
  double[][] retval = new double[histData.length][3];
  
  for(int i=0; i < histData.length; i++ )
  {
    retval[i][0] = ( min + step * (double) i ); // lower 
    retval[i][1] = ( min + step * ( (double) (i+1) ) ) ; // upper
    retval[i][2] = ((double) histData[i]) / (double) howmany; // frequency
  }
  
  return retval;
}



public double[][] cumarray()
{
  double[][] retval = new double[histData.length][4];
  int    cumFreq = 0;

  for(int i=0; i < histData.length; i++ )
  {
    retval[i][0] = ( min + step * (double) i ); // lower 
    retval[i][1] = ( min + step * ( (double) (i+1) ) ) ; // upper

    cumFreq += histData[i]; // frequency
    retval[i][2] = cumFreq;
    retval[i][3] = ((double) cumFreq)  / ((double) howmany) ;
  }
  
  return retval;
}


public double[] quantiles( double[] quantiles )
{
  double[] retval = new double[quantiles.length];
  int    cumFreq = 0;
  int    quantIndex = 0;

  for(int i=0; (i < histData.length) && (quantIndex < quantiles.length) ; i++ )
  {
    cumFreq += histData[i]; // frequency

    while( (quantIndex < quantiles.length)  && 
	   (cumFreq >= (int) ( quantiles[quantIndex] * (double) howmany )) )
      {
	// center of interval
	retval[quantIndex] = ( min + step * ( (double) i + 0.5 ) ); 
	quantIndex++;
      }
  }

  for(int i=quantIndex; i < quantiles.length; i++ )
    retval[i] = retval[quantIndex-1];
  
  return retval;
}


@ %def 

<<Main>>=

public static void main( String[] argv )
{
  double[] testData = new double[200];
  for(int i=0; i<testData.length; i++) 
    testData[i] = (double) i;

  Histogram test = new Histogram( testData, 11 );
  System.err.println( test );
  
  Histogram test2 = new Histogram( -10., 209., 11 );
  test2.update(testData);
  System.err.println( test2 );

  Histogram test3 = new Histogram(0., 200., 11 );
  for(int i=0; i<testData.length; i++)
    test3.update(new Double(testData[i]));
  System.err.println( test3 );

  System.err.println("Howmany = " + test3.howmany() );

  double quantiles[] = new double[]{ -1.0, 0.0,  0.05, 0.25, 0.50,  0.95, 100 };
  double[] result = test3.quantiles( quantiles );
  for(int i=0; i<quantiles.length; i++)
    System.err.println( quantiles[i] + " quantile = " + result[i] );

}
    
@ %def

<<Package>>=

  package org.omegahat.Simulation.MCMC.Listeners;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.*;

    /* none */

@ %def 





  
}

