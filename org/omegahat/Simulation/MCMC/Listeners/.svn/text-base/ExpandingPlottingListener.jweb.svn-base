This class implements a very basic listener.  It counts occurences of
[[MCMCChainStepEvent]]]]s and displays the current count when one is
recieved.

<<*>>=

<<Package>>
<<Imports>>

/**
 * Displays contents and counter of <code>RecordingStepEvent<code>s when one is recieved.
 */
public class ExpandingPlottingListener extends PlottingListener
{
    <<Fields>>
    <<Accessors>>
    <<Constructors>>
    <<Methods>>
    <<Main>>
}
@

<<Fields>>=

int maxsize;

@ %def 

<<Accessors>>=

int maxsize() { return maxsize; }
int maxsize( int newval ) { return maxsize = newval; }
@

<<Constructors>>=

public ExpandingPlottingListener( String[] varNames )
{
  this(varNames, 1000, 100000);
}

public ExpandingPlottingListener ( String[] varNames, int minsize, int maxsize )
{
  super(varNames, minsize);
  this.maxsize=maxsize;
}

@ %def 

<<Methods>>=
public void notify( MCMCEvent e )
{
  // if we've filled up the array //
  if( index >= (int) ( 0.95 * (double) time.length) 
       && 
     time.length < maxsize )
  {
    
    // double the size of the data arrays
    int oldsize = time.length;
    int size = Math.min ( oldsize*2, maxsize );
    this.time = new double[size];
    double[][] data = new double[varNames.length][size];

    // copy the old stuff out
    for(int j=0; j<varNames.length; j++)
    for(int i=0; i< size; i++ )
    {
      if(j==0) this.time[ i ] = (double) i;  // only do once;

      if(i < oldsize)
	{
	  data[j][i] = this.data[j][i];
	}
      else
	{
	  data[j][i] = Double.NaN;
	}
    }

    
    // replace the old arrays
    this.data = data;
    
    // force recreation of the plots
    for(int j=0; j<varNames.length; j++)
    {
            plots[j]  = new Scatterplot( this.time, this.data[j], 
					 Scatterplot.LINES ); //| Scatterplot.WITH_BREAKS );
      // Would this work:
      //      plots[j].addLines( this.time, this.data[j], Scatterplot.EXTEND_SCALE ); 
      plotWindows[j].plot(plots[j]);
    }
  }

  super.notify( e );
  
}

@ %def 

<<Main>>=

    /* none */


@ %def 

<<Package>>=

  package org.omegahat.Simulation.MCMC.Listeners;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.*;

import java.util.Vector;
import org.omegahat.Graphics.Plots.*;
import org.omegahat.Graphics.Devices.*;

@ %def 




