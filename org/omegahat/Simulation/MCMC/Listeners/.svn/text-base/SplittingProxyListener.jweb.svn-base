
This object implements both [[MCMCListener]] and [[NotifyingObject]].
It serves as a proxy [[MCMCListener]] that forwards the current state
of [[GenericChainStepEvent]] events that can be typecast to (double[]) and
that are within the range (optionally) specified for each listener.

This proxy allows (for instance) the states for seperate modes to be
forwarded to separate listeners.

If no range has been registered for a listerer, it recieves all
events.


<<Copyright>>=

/* $Header: /cvsroot/hydra-mcmc/Hydra/org/omegahat/Simulation/MCMC/Listeners/SplittingProxyListener.jweb,v 1.1.1.1 2001/04/04 17:16:33 warneg Exp $ */
/* (c) 1999 by the Omegahat Project */
/* (c) 2000 by the Gregory R. Warnes */

@ %def 

<<*>>=

<<Copyright>>
<<Package>>
<<Imports>>

/** 
 * This object serves as a proxy <code>MCMCListener</code> that only
 * forwards 1 out of every <code>thinningFactor</code> events to its
 * subscribers 
 **/
public class SplittingProxyListener implements NotifyingObject, MCMCListener
{
    <<Fields>>
    <<Accessors>>
    <<Methods implementing NotifyingObject>>
    <<Methods implementing MCMCListener>>
    <<Local Methods>>
    <<Constructor>>
}

@
<<Fields>>=
    
protected Hashtable listeners = new Hashtable();  
protected Hashtable minRanges = new Hashtable();
protected Hashtable maxRanges = new Hashtable();

@


<<Accessors>>=

    /* none */

@ %def 



<<Methods implementing NotifyingObject>>=

public class MyHandle implements MCMCListenerHandle
{
  public MyHandle() {};
}

// we can always register and unregister listeners
public MCMCListenerHandle registerListener  ( MCMCListener  listener ) 
{ 
  
  MCMCListenerHandle handle = new MyHandle();
  
  listeners.put( handle,  listener); 
  return handle;
}

public void    unregisterListener( MCMCListenerHandle handle   )
{ 
  listeners.remove( handle );
}
    
protected void   notifyAll( MCMCEvent e )
{
  MCMCListener l = null;
    
  Enumeration iterator = listeners.keys();
  while( iterator.hasMoreElements() )
    outer: {   

      MyHandle hash = (MyHandle) iterator.nextElement();

      inner: {
	

	if( e instanceof GenericChainStepEvent)
	  {
	    double[] state;
	    //	    try 
	    //		{
	    if (e instanceof DetailHastingsCoupledStepEvent)
		{
		    state = ArrayTools.Otod( ((DetailHastingsCoupledStepEvent) e).currentComponent );
		}
	    else 
		{
		    throw new RuntimeException( "This class only designed to handle 'DetailHastingsCoupledStepEvent'");
		    
		}


		//	      }
	      //	    catch( Throwable t)
	      //	      {
	      //		break inner;
	      //	      }
	    
	    double[] min = (double[]) minRanges.get(hash);
	    double[] max = (double[]) maxRanges.get(hash);
	    
	    if(min != null)
	      {
		if( state.length != min.length ) 
		  throw new RuntimeException("Min Range does not conform to current state");
		
		for(int i=0; i < min.length; i++)
		  if( state[i] < min[i] ) break inner;
	      }
	    
	    if(max != null)
	      {
		if( state.length != max.length ) 
		  throw new RuntimeException("Max Range does not conform to current state");
		
		for(int i=0; i < max.length; i++)
		  if( state[i] > max[i] ) break inner;
	      }

	    GenericChainStepEvent ev = new GenericChainStepEvent( this, new MultiState(1,state) );

	    l = (MCMCListener) listeners.get(hash);
	    if( l != null) l.notify( ev );
	  }
	else
	  {
	    l = (MCMCListener) listeners.get(hash);
	    if( l != null) l.notify( e );
	  }
      }// inner

  } // outer
}




@ %def 

<<Methods implementing MCMCListener>>=
/** Function to be called for notification */
public void notify( MCMCEvent event )
{
    notifyAll(event);
}


@ %def 

<<Local Methods>>=
public void setRange( MCMCListenerHandle handle, double[] min, double[] max )
{
  if( ! (handle instanceof MyHandle) )
    throw new RuntimeException("Illegal listener handle.");

  if( !listeners.containsKey(handle) )
    throw new RuntimeException("Specified Listener not registered.");  

  minRanges.put( handle, min );
  maxRanges.put( handle, max );
}

		  

@ %def 


<<Constructor>>=

public SplittingProxyListener()
{
}

@ %def 



<<Package>>=

    package org.omegahat.Simulation.MCMC.Listeners;

@ %def 

<<Imports>>=

    import org.omegahat.GUtilities.ArrayTools;

    import org.omegahat.Simulation.MCMC.*;

    import java.util.*;

@ %def 

