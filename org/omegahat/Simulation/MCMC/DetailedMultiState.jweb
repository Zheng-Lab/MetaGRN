This class extends MCMCState by adding the ability to store custom
information about the proposal process.  The purpose of this
information is to allow optimizations by retaining some information
rather than recomputing it.

<<*>>=

<<Package>>
<<Imports>>

/**
 * MCMCState that can hold several individual states.  Its purpose is
 * to allow a multi-chain sampler to easily store and retrieve the
 * states of individual chains.  
*/
public class DetailedMultiState extends MultiState 
{
    <<Fields>>
    <<Accessors>>
    <<Constructors>>
    <<Methods>>
    <<Main>>
}
@

<<Fields>>=

ProposalDetails proposalDetails;

@ %def 

<<Accessors>>=

ProposalDetails proposalDetails() { return proposalDetails; }
ProposalDetails proposalDetails( ProposalDetails proposalDetails ) 
{ 
  return this.proposalDetails = proposalDetails;
}

@ %def 


<<Constructors>>=

    public DetailedMultiState( int size )
    {
      super(size);
    }

    public DetailedMultiState( int size, Object oneValue )
    {
      super(size, oneValue);
    }

    public DetailedMultiState()
    {
      super();
    }



@ %def 

<<Methods>>=

    public String toString()
    {
      String retval = super.toString();

      if(proposalDetails != null )
      retval += "Proposal Details:\n " + proposalDetails + "\n";

      return retval;
    }

@ %def 

<<Main>>=

    /* none */

@ %def 

<<Package>>=

  package org.omegahat.Simulation.MCMC;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;

    import java.lang.reflect.Array;

@ %def 
