
This file implements [[CustomMetropolisSampler]].  The constructor
accepts an [[SymmetricPropsal]] and a [[UnnormalizedDensity]] which is
then used to create a Metropolis Sampler.  Objects of this class areb
immutable once created.


<<Copyright>>=

/* $Header: /cvsroot/hydra-mcmc/Hydra/org/omegahat/Simulation/MCMC/CustomMetropolisSampler.jweb,v 1.1.1.1 2001/04/04 17:16:13 warneg Exp $  */
/* (c) 1999 by the Omegahat Project */

@ %def 

<<*>>=

<<Copyright>>
<<Package>>
<<Imports>>

/** 
 *  A Markov Sampler that uses an internal
 *  <code>SymmetricProposal</code> and
 *  <code>UnnormalizedDensity</code> to generate the next Markov
 *  state.  
 */
public class CustomMetropolisSampler extends CustomMetropolisHastingsSampler
{

    <<Fields>>
    <<Constructors>>
    <<New Methods>>
    <<Main>>
}

@
<<Fields>>=

    /* Inherited from CustomMetropolisHastingsChain */

@

<<Accessors>>=

SymmetricProposal   getProposal() { return proposal; } // overrides CustomMetropolisHastingsSampler 

@ %def 


<<New Methods>>=


protected double acceptanceProb( Object current, Object proposed )
{
  return  Math.exp( logAcceptanceProb( current, proposed ) );
}



protected double logAcceptanceProb( Object current, Object proposed )
{
  double numer = target.logUnnormalizedPDF ( proposed );
  double denom = target.logUnnormalizedPDF ( current );
  
  if( Double.isNaN(numer) )
	return Double.NEGATIVE_INFINITY;
  else if ( Double.isInfinite(denom) || Double.isNaN(denom) )
    return 0.0;
  else
    return  Math.min( 0.0, numer - denom );
}


@ %def 


<<Constructors>>=

public CustomMetropolisSampler( ContainerState state, UnnormalizedDensity target, SymmetricProposal proposal, PRNG prng )
{
    super( state, target, proposal, prng);
}


public CustomMetropolisSampler( Object state, UnnormalizedDensity target, SymmetricProposal proposal, PRNG prng   )
{
    this( new ContainerState(state), target, proposal, prng );
}

@ %def 


This section contains code that I've used to test and debug this class.

<<Main>>=


public static void main( String[] argv )
{
    PRNG prng = new CollingsPRNG( (new CollingsPRNGAdministrator()).registerPRNGState() );

    double[] state = new double[2];
    state[0] = 0.0 ;
    state[1] = 0.0 ;

    CustomMetropolisSampler test = new CustomMetropolisSampler( state, 
                                                                new BivariateNormalDensity(),
                                                                new NormalMetropolisProposal(2,prng),
                                                                prng );
    listenerPrinter l = new listenerPrinter();

    test.registerListener(l);
    test.iterate(10);
}

    

@ %def 



<<Package>>=

    package org.omegahat.Simulation.MCMC;

@ %def 

<<Imports>>=

    import org.omegahat.Simulation.MCMC.Proposals.*;
    import org.omegahat.Simulation.MCMC.Targets.*;
    import org.omegahat.Simulation.MCMC.Listeners.*;

    import org.omegahat.Probability.Distributions.*;
    import org.omegahat.Simulation.RandomGenerators.*;

@ %def 

